/*
 * SwimRaceOrganizerView.java
 */

package swimraceorganizer;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;

import work.TestButton;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;

/**
 * The application's main frame.
 */
public class SwimRaceOrganizerView extends FrameView {

    public SwimRaceOrganizerView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = SwimRaceOrganizerApp.getApplication().getMainFrame();
            aboutBox = new SwimRaceOrganizerAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        SwimRaceOrganizerApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jBAddSwimmer = new javax.swing.JButton();
        jBAddSwimmingEvent = new javax.swing.JButton();
        jBAllSwimmers = new javax.swing.JButton();
        jBAllEvents = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLSwimmerActions = new javax.swing.JLabel();
        jLEventActions = new javax.swing.JLabel();
        jBRegisterSwimmer = new javax.swing.JButton();
        jBgenerateHeats = new javax.swing.JButton();
        jBAllRegistrations = new javax.swing.JButton();
        jRegistrationActions = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLGenerateActions = new javax.swing.JLabel();
        jBTest = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(swimraceorganizer.SwimRaceOrganizerApp.class).getContext().getResourceMap(SwimRaceOrganizerView.class);
        jBAddSwimmer.setText(resourceMap.getString("jBAddSwimmer.text")); // NOI18N
        jBAddSwimmer.setName("jBAddSwimmer"); // NOI18N
        jBAddSwimmer.setPreferredSize(new java.awt.Dimension(100, 25));
        jBAddSwimmer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddSwimmerActionPerformed(evt);
            }
        });

        jBAddSwimmingEvent.setText(resourceMap.getString("jBAddSwimmingEvent.text")); // NOI18N
        jBAddSwimmingEvent.setName("jBAddSwimmingEvent"); // NOI18N
        jBAddSwimmingEvent.setPreferredSize(new java.awt.Dimension(100, 25));
        jBAddSwimmingEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddSwimmingEventActionPerformed(evt);
            }
        });

        jBAllSwimmers.setText(resourceMap.getString("jBAllSwimmers.text")); // NOI18N
        jBAllSwimmers.setName("jBAllSwimmers"); // NOI18N
        jBAllSwimmers.setPreferredSize(new java.awt.Dimension(100, 25));
        jBAllSwimmers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAllSwimmersActionPerformed(evt);
            }
        });

        jBAllEvents.setText(resourceMap.getString("jBAllEvents.text")); // NOI18N
        jBAllEvents.setName("jBAllEvents"); // NOI18N
        jBAllEvents.setPreferredSize(new java.awt.Dimension(100, 25));
        jBAllEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAllEventsActionPerformed(evt);
            }
        });

        jSeparator1.setName("jSeparator1"); // NOI18N

        jLSwimmerActions.setText(resourceMap.getString("jLSwimmerActions.text")); // NOI18N
        jLSwimmerActions.setName("jLSwimmerActions"); // NOI18N

        jLEventActions.setText(resourceMap.getString("jLEventActions.text")); // NOI18N
        jLEventActions.setName("jLEventActions"); // NOI18N

        jBRegisterSwimmer.setText(resourceMap.getString("jBRegisterSwimmer.text")); // NOI18N
        jBRegisterSwimmer.setName("jBRegisterSwimmer"); // NOI18N
        jBRegisterSwimmer.setPreferredSize(new java.awt.Dimension(100, 25));
        jBRegisterSwimmer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRegisterSwimmerActionPerformed(evt);
            }
        });

        jBgenerateHeats.setText(resourceMap.getString("jBgenerateHeats.text")); // NOI18N
        jBgenerateHeats.setName("jBgenerateHeats"); // NOI18N
        jBgenerateHeats.setPreferredSize(new java.awt.Dimension(100, 25));
        jBgenerateHeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBgenerateHeatsActionPerformed(evt);
            }
        });

        jBAllRegistrations.setText(resourceMap.getString("jBAllRegistrations.text")); // NOI18N
        jBAllRegistrations.setName("jBAllRegistrations"); // NOI18N
        jBAllRegistrations.setPreferredSize(new java.awt.Dimension(100, 25));
        jBAllRegistrations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAllRegistrationsActionPerformed(evt);
            }
        });

        jRegistrationActions.setText(resourceMap.getString("jRegistrationActions.text")); // NOI18N
        jRegistrationActions.setName("jRegistrationActions"); // NOI18N

        jSeparator2.setName("jSeparator2"); // NOI18N

        jLGenerateActions.setText(resourceMap.getString("jLGenerateActions.text")); // NOI18N
        jLGenerateActions.setName("jLGenerateActions"); // NOI18N

        jBTest.setText(resourceMap.getString("jBTest.text")); // NOI18N
        jBTest.setName("jBTest"); // NOI18N
        jBTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBRegisterSwimmer, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBgenerateHeats, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBAllSwimmers, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBAddSwimmer, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBAddSwimmingEvent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                            .addComponent(jBAllEvents, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                            .addComponent(jBAllRegistrations, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBTest)
                        .addGap(103, 103, 103))))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLSwimmerActions)
                .addGap(401, 401, 401))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                .addContainerGap(11, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                .addContainerGap(11, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLGenerateActions)
                .addContainerGap(423, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, mainPanelLayout.createSequentialGroup()
                .addGap(367, 367, 367)
                .addComponent(jLEventActions)
                .addGap(58, 58, 58))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRegistrationActions)
                .addContainerGap(385, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jLSwimmerActions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBAddSwimmer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBAllSwimmers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jLEventActions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBAddSwimmingEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBAllEvents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRegistrationActions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBRegisterSwimmer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBAllRegistrations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLGenerateActions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBgenerateHeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jBTest)))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(swimraceorganizer.SwimRaceOrganizerApp.class).getContext().getActionMap(SwimRaceOrganizerView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 321, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jBAddSwimmerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAddSwimmerActionPerformed
        if (addSwimmer == null) {
            JFrame mainFrame = SwimRaceOrganizerApp.getApplication().getMainFrame();
            addSwimmer = new AddSwimmer(mainFrame);
            addSwimmer.setLocationRelativeTo(mainFrame);
        }
        SwimRaceOrganizerApp.getApplication().show(addSwimmer);
    }//GEN-LAST:event_jBAddSwimmerActionPerformed

    private void jBAddSwimmingEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAddSwimmingEventActionPerformed
        // TODO add your handling code here:
        if (addSwimmingEvent == null) {
            JFrame mainFrame = SwimRaceOrganizerApp.getApplication().getMainFrame();
            addSwimmingEvent = new AddSwimmingEvent(mainFrame);
            addSwimmingEvent.setLocationRelativeTo(mainFrame);
        }
        SwimRaceOrganizerApp.getApplication().show(addSwimmingEvent);
    }//GEN-LAST:event_jBAddSwimmingEventActionPerformed

    private void jBAllSwimmersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAllSwimmersActionPerformed
        if (allSwimmers == null) {
            JFrame mainFrame = SwimRaceOrganizerApp.getApplication().getMainFrame();
            allSwimmers = new AllSwimmers(mainFrame, true);
            allSwimmers.setLocationRelativeTo(mainFrame);
        }
        SwimRaceOrganizerApp.getApplication().show(allSwimmers);
    }//GEN-LAST:event_jBAllSwimmersActionPerformed

    private void jBAllEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAllEventsActionPerformed
        if (allEvents == null) {
            JFrame mainFrame = SwimRaceOrganizerApp.getApplication().getMainFrame();
            allEvents = new AllEvents(mainFrame, true);
            allEvents.setLocationRelativeTo(mainFrame);
        }
        SwimRaceOrganizerApp.getApplication().show(allEvents);
    }//GEN-LAST:event_jBAllEventsActionPerformed

    private void jBRegisterSwimmerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRegisterSwimmerActionPerformed
        if (registerSwimmer == null) {
            JFrame mainFrame = SwimRaceOrganizerApp.getApplication().getMainFrame();
            registerSwimmer = new RegisterSwimmerForEvent(mainFrame, true);
            registerSwimmer.setLocationRelativeTo(mainFrame);
        }
        SwimRaceOrganizerApp.getApplication().show(registerSwimmer);
    }//GEN-LAST:event_jBRegisterSwimmerActionPerformed

    private void jBgenerateHeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBgenerateHeatsActionPerformed
        if (generateHeats == null) {
            JFrame mainFrame = SwimRaceOrganizerApp.getApplication().getMainFrame();
            generateHeats = new GenerateHeats(mainFrame, true);
            generateHeats.setLocationRelativeTo(mainFrame);
        }
        SwimRaceOrganizerApp.getApplication().show(generateHeats);
    }//GEN-LAST:event_jBgenerateHeatsActionPerformed

    private void jBAllRegistrationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAllRegistrationsActionPerformed
        if (allRegistrations == null) {
            JFrame mainFrame = SwimRaceOrganizerApp.getApplication().getMainFrame();
            allRegistrations = new AllRegistrations(mainFrame, true);
            allRegistrations.setLocationRelativeTo(mainFrame);
        }
        SwimRaceOrganizerApp.getApplication().show(allRegistrations);
    }//GEN-LAST:event_jBAllRegistrationsActionPerformed

    private void jBTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTestActionPerformed
        if (testDyn == null) {
            JFrame mainFrame = SwimRaceOrganizerApp.getApplication().getMainFrame();
            testDyn = new TestButton();
            testDyn.setLocationRelativeTo(mainFrame);
        }
        SwimRaceOrganizerApp.getApplication().show(testDyn);
    }//GEN-LAST:event_jBTestActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAddSwimmer;
    private javax.swing.JButton jBAddSwimmingEvent;
    private javax.swing.JButton jBAllEvents;
    private javax.swing.JButton jBAllRegistrations;
    private javax.swing.JButton jBAllSwimmers;
    private javax.swing.JButton jBRegisterSwimmer;
    private javax.swing.JButton jBTest;
    private javax.swing.JButton jBgenerateHeats;
    private javax.swing.JLabel jLEventActions;
    private javax.swing.JLabel jLGenerateActions;
    private javax.swing.JLabel jLSwimmerActions;
    private javax.swing.JLabel jRegistrationActions;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
    private JDialog addSwimmer;
    private JDialog addSwimmingEvent;
    private JDialog allSwimmers;
    private JDialog allEvents;
    private JDialog registerSwimmer;
    private JDialog generateHeats;
    private JDialog allRegistrations;
    private TestButton testDyn;
}
